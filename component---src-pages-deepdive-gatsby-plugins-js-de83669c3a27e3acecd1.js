"use strict";(self.webpackChunkmy_gatsby_site=self.webpackChunkmy_gatsby_site||[]).push([[96],{9354:function(e,t,a){var n=a(7294);t.Z=function(e){return n.createElement("a",{href:e.href,rel:"noreferrer",target:"_blank"},e.title)}},9205:function(e,t,a){a.r(t);var n=a(7294),s=a(9354),l=a(9731),i=a(1270);t.default=function(){return n.createElement("main",null,n.createElement("title",null,"Plugin loading"),n.createElement("p",null,"The bootstrap loads plugins"),n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/17a3f9f69ae2710f4aeef27603226281f2713281/packages/gatsby/src/bootstrap/index.ts#L55",title:"loadConfigAndPlugins"}),n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/17a3f9f69ae2710f4aeef27603226281f2713281/packages/gatsby/src/utils/worker/child/load-config-and-plugins.ts",title:"loadConfigAndPlugins"}),n.createElement("p",null,"Note the ",n.createElement("code",null,"apiRunnerNode(`onPluginInit`)")," that will will run the plugin init gatsby node api method for all plugins."),n.createElement(l.Z,{language:"javascript",style:i.Z},'\nimport { loadConfigAndPlugins as internalLoadConfigAndPlugins } from "../../../bootstrap/load-config-and-plugins"\nimport { store } from "../../../redux"\nimport apiRunnerNode from "../../api-runner-node"\n\nexport async function loadConfigAndPlugins(\n  ...args: Parameters<typeof internalLoadConfigAndPlugins>\n): Promise<void> {\n  const [{ siteDirectory, program }] = args\n\n  store.dispatch({\n    type: `SET_PROGRAM`,\n    payload: {\n      ...program,\n      directory: siteDirectory,\n    },\n  })\n  await internalLoadConfigAndPlugins(...args)\n\n  // Cache is already initialized\n  if (_CFLAGS_.GATSBY_MAJOR === `4`) {\n    await apiRunnerNode(`onPluginInit`)\n  } else {\n    await apiRunnerNode(`unstable_onPluginInit`)\n  }\n}\n'),n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/17a3f9f69ae2710f4aeef27603226281f2713281/packages/gatsby/src/bootstrap/load-config-and-plugins.ts#L97",title:"loadConfigAndPlugins"}),n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/17a3f9f69ae2710f4aeef27603226281f2713281/packages/gatsby/src/bootstrap/load-plugins/index.ts#L100",title:"loadPlugins"}),n.createElement("p",null,n.createElement("b",null,"The actual logic !"),n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/17a3f9f69ae2710f4aeef27603226281f2713281/packages/gatsby/src/bootstrap/load-plugins/load.ts#L179",title:"loadPlugins"})),n.createElement("p",null,"Following the code we can see that plugins are ",n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/tree/17a3f9f69ae2710f4aeef27603226281f2713281/packages/gatsby/src/internal-plugins",title:"internal plugins"}),", ",n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/tree/17a3f9f69ae2710f4aeef27603226281f2713281/packages/gatsby-plugin-typescript",title:"gatsby-plugin-typescript"}),", plugins in config ( both npm and local), the default page creator ",n.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/tree/master/packages/gatsby-plugin-page-creator",title:"gatsby-plugin-page-creator"})," with options to source from src/pages ( unless explicitly provided ) and a default-site-plugin representing the loose files. One scenario where you would need the plugin name, default-site-plugin, is if you were using node api action setPluginStatus.  To retrieve you need to use the store api helper - ",n.createElement("code",null,"store.getstate().status.plugins.[pluginname]")),n.createElement("p",null,"A list of the functions implemented by each plugin for the 3 apis is determined.  For gatsby-node.js the module is required.  For the other two they are parsed."))}}}]);
//# sourceMappingURL=component---src-pages-deepdive-gatsby-plugins-js-de83669c3a27e3acecd1.js.map