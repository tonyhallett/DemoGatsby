{"version":3,"file":"component---src-pages-deepdive-gatsby-reporter-js-30689280d66b526b83f7.js","mappings":"kIAMA,IAJmB,SAAAA,GACf,OAAO,qBAAGC,KAAMD,EAAMC,KAAMC,IAAI,aAAcC,OAAO,UAAUH,EAAMI,S,gHC8MzE,EA5MiB,WACb,OAAO,4BACH,yCAEA,wIAA+G,gBAAC,IAAD,CAAYH,KAAK,uIAAuIG,MAAM,YAA7Q,KACA,mMAA0K,gBAAC,IAAD,CAAYH,KAAK,qIAAqIG,MAAM,uCAAtU,wEACmE,gBAAC,IAAD,CAAYH,KAAK,6HAA6HG,MAAM,SADvN,kBAC8O,gBAAC,IAAD,CAAYH,KAAK,wIAAwIG,MAAM,iBAE7Y,gBAAC,IAAD,CAAmBC,SAAS,aAAaC,MAAOC,EAAAA,GAAhD,+UAeA,0KACA,kMACA,yBAAG,gBAAC,IAAD,CAAYN,KAAK,6CAA6CG,MAAM,SACvE,qQAGA,4EACA,gBAAC,IAAD,CAAmBC,SAAS,aAAaC,MAAOC,EAAAA,GAAhD,s7BAkCA,wEAA+C,gBAAC,IAAD,CAAYN,KAAK,uIAAuIG,MAAM,YAA7M,QAA6N,gBAAC,IAAD,CAAYH,KAAK,uIAAuIG,MAAM,mBAA3X,6BAAua,gBAAC,IAAD,CAAYH,KAAK,uIAAuIG,MAAM,UAArkB,2FACA,gBAAC,IAAD,CAAmBC,SAAS,aAAaC,MAAOC,EAAAA,GAAhD,k2BAoCA,sDAA6B,gBAAC,IAAD,CAAYN,KAAK,+IAA+IG,MAAM,aAAnM,8BACA,gBAAC,IAAD,CAAmBC,SAAS,aAAaC,MAAOC,EAAAA,GAAhD,0gBAmBA,gCAAO,gBAAC,IAAD,CAAYN,KAAK,4JAA4JG,MAAM,sBAA1L,KACA,gBAAC,IAAD,CAAmBC,SAAS,aAAaC,MAAOC,EAAAA,GAAhD,utEC/H4CC,ED+H5C,6HC9HDC,IACHA,EAAMD,EAAQE,MAAM,IAGtBF,EAAQC,IAAMA,ED0HR,ECzHCD,KDsMD,+LC5MO,IAAqCA,EAASC","sources":["webpack://my-gatsby-site/./src/components/linkNewTab.js","webpack://my-gatsby-site/./src/pages/deepdive/gatsby/reporter.js","webpack://my-gatsby-site/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import * as React from \"react\"\r\n\r\nconst LinkNewTab = props => {\r\n    return <a href={props.href} rel=\"noreferrer\"  target=\"_blank\">{props.title}</a>\r\n  }\r\n\r\nexport default LinkNewTab","import * as React from \"react\"\r\nimport LinkNewTab from \"../../../components/linkNewTab\"\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nconst reporter = () => {\r\n    return <main>\r\n        <title>Reporter</title>\r\n        {/* todo link to setStore */}\r\n        <p>The reporter is used by the cli and the build.  The logging to the console occurs when a reporter action is <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L64\" title=\"invoked\"/>.</p>\r\n        <p>The reporter does more than just log messages but concentrating on messages for a moment.  For success, info, warn, log ( and verbose if set in config ) the reporter  <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/reporter.ts#L217\" title=\"invokes the createLog redux action\"/>.  \r\n        How this results in message in the console begins by understanding <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/index.ts\" title=\"this\"/> in particular <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/start-logger.ts#L11\" title=\"startLogger\"/>\r\n        </p>\r\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n  {`\r\n  import { startLogger } from \"./start-logger\"\r\n  import { patchConsole } from \"./patch-console\"\r\n  import { catchExitSignals } from \"./catch-exit-signals\"\r\n  import { reporter } from \"./reporter\"\r\n  \r\n  catchExitSignals()\r\n  startLogger()\r\n  patchConsole(reporter)\r\n  \r\n  export default reporter\r\n  module.exports = reporter\r\n  `}\r\n        </SyntaxHighlighter>\r\n        <p>patchConsole is simple in that console.log, warn, info and error are replaced to call through to the similarly named methods of the reporter.</p>\r\n        <p>startLogger determines the logger to use. You can specify with the environment variable GATSBY_LOGGER to change from the default ink to the json logger or yurnalist.</p>\r\n        <p><LinkNewTab href=\"https://github.com/vadimdemedes/ink#readme\" title=\"ink\"/></p>\r\n        <cite>\r\n        Ink provides the same component-based UI building experience that React offers in the browser, but for command-line apps. It uses Yoga to build Flexbox layouts in the terminal, so most CSS-like props are available in Ink as well. \r\n        </cite>\r\n        <p>Initializing ink uses the render method of ink </p>\r\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n  {`\r\n  import React, { useContext } from \"react\"\r\n  import { render } from \"ink\"\r\n  import StoreStateContext, { StoreStateProvider } from \"./context\"\r\n  import CLI from \"./cli\"\r\n  \r\n  const ConnectedCLI: React.FC = (): React.ReactElement => {\r\n    const state = useContext(StoreStateContext)\r\n    const showStatusBar =\r\n      // @ts-ignore - program exists on state but we should refactor this\r\n      state.program?._?.[0] === \\`develop\\` &&\r\n      // @ts-ignore - program exists on state but we should refactor this\r\n      state.program?.status === \\`BOOTSTRAP_FINISHED\\`\r\n    const showPageTree = !!state.pageTree\r\n  \r\n    return (\r\n      <CLI\r\n        showStatusBar={Boolean(showStatusBar)}\r\n        showPageTree={Boolean(showPageTree)}\r\n        logs={state.logs}\r\n      />\r\n    )\r\n  }\r\n  \r\n  export function initializeINKLogger(): void {\r\n    render(\r\n      <StoreStateProvider>\r\n        <ConnectedCLI />\r\n      </StoreStateProvider>\r\n    )\r\n  }\r\n  `}\r\n        </SyntaxHighlighter>\r\n        <p>Key to above is the StoreStateProvider that <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L72\" title=\"listens\"/> for <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L64\" title=\"public actions\"/>and provides the reporter <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L30\" title=\"store\"/> state through context that the ConnectedCLI receives and passes the logs state to CLI.</p>\r\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n  {`\r\n  import React, { useState, useLayoutEffect, createContext } from \"react\"\r\n  import { getStore, onLogAction } from \"../../redux\"\r\n  import { IGatsbyCLIState } from \"../../redux/types\"\r\n  import { IRenderPageArgs } from \"../../types\"\r\n  \r\n  const StoreStateContext = createContext<{\r\n    logs: IGatsbyCLIState\r\n    pageTree: IRenderPageArgs | null\r\n  }>(getStore().getState())\r\n  \r\n  export const StoreStateProvider: React.FC = ({\r\n    children,\r\n  }): React.ReactElement => {\r\n    const [state, setState] = useState(getStore().getState())\r\n  \r\n    useLayoutEffect(\r\n      () =>\r\n        onLogAction(() => {\r\n          setState(getStore().getState())\r\n        }),\r\n      []\r\n    )\r\n  \r\n    return (\r\n      <StoreStateContext.Provider value={state}>\r\n        {children}\r\n      </StoreStateContext.Provider>\r\n    )\r\n  }\r\n  \r\n  export default StoreStateContext\r\n  `}\r\n        </SyntaxHighlighter>\r\n\r\n        <p>Concentrating on just the <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/reducers/logs.ts#L28\" title=\"messages\"/> from the createLog action</p>\r\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n  {`\r\n            <Static items={messages}>\r\n            {(message): React.ReactElement =>\r\n              message.level === \\`ERROR\\` ? (\r\n                <ErrorComponent\r\n                  details={message as IStructuredError}\r\n                  key={messages.indexOf(message)}\r\n                />\r\n              ) : (\r\n                <Message\r\n                  key={messages.indexOf(message)}\r\n                  {...(message as IMessageProps)}\r\n                />\r\n              )\r\n            }\r\n          </Static>\r\n  `}\r\n        </SyntaxHighlighter>\r\n        <p>The <LinkNewTab href=\"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/loggers/ink/components/messages.tsx#L37\" title=\"Message component\"/>.</p>\r\n        <SyntaxHighlighter language=\"javascript\" style={docco}>\r\n  {`\r\n        import React from \"react\"\r\n        import { Box, Text } from \"ink\"\r\n        import { createLabel } from \"./utils\"\r\n        \r\n        import { ActivityLogLevels, LogLevels } from \"../../../constants\"\r\n        \r\n        const getLabel = (\r\n          level: ActivityLogLevels | LogLevels\r\n        ): ReturnType<typeof createLabel> => {\r\n          switch (level) {\r\n            case ActivityLogLevels.Success:\r\n            case LogLevels.Success:\r\n              return createLabel(\\`success\\`, \\`green\\`)\r\n            case LogLevels.Warning:\r\n              return createLabel(\\`warn\\`, \\`yellow\\`)\r\n            case LogLevels.Debug:\r\n              return createLabel(\\`verbose\\`, \\`gray\\`)\r\n            case LogLevels.Info:\r\n              return createLabel(\\`info\\`, \\`blue\\`)\r\n            case ActivityLogLevels.Failed:\r\n              return createLabel(\\`failed\\`, \\`red\\`)\r\n            case ActivityLogLevels.Interrupted:\r\n              return createLabel(\\`not finished\\`, \\`gray\\`)\r\n        \r\n            default:\r\n              return createLabel(level, \\`blue\\`)\r\n          }\r\n        }\r\n\r\n        /*\r\n            export const createLabel =\r\n            (text: string, color: string): FunctionComponent<TextProps> =>\r\n            (...props): JSX.Element =>\r\n            (\r\n                <Text color={color} {...props}>\r\n                    {text}\r\n                </Text>\r\n            )\r\n        */\r\n        \r\n        export interface IMessageProps {\r\n          level: ActivityLogLevels | LogLevels\r\n          text: string\r\n          duration?: number\r\n          statusText?: string\r\n        }\r\n        \r\n        export const Message = React.memo<IMessageProps>(\r\n          ({ level, text, duration, statusText }) => {\r\n            let message = text\r\n            if (duration) {\r\n              message += \\` - $\\{duration.toFixed(3)}s\\`\r\n            }\r\n            if (statusText) {\r\n              message += \\` - \\${statusText}\\`\r\n            }\r\n            if (!level || level === \\`LOG\\`) {\r\n              return <Text>{message}</Text>\r\n            }\r\n        \r\n            const TextLabel = getLabel(level)\r\n        \r\n            return (\r\n              <Box flexDirection=\"row\">\r\n                <Text wrap=\"wrap\">\r\n                  <TextLabel />\r\n                  {` `}\r\n                  {message}\r\n                </Text>\r\n              </Box>\r\n            )\r\n          }\r\n        )\r\n  `}\r\n        </SyntaxHighlighter>\r\n        <p>We can see that prefix only ( success etc ) is coloured and hard coded and dependent upon the message level associated with reporter.success, warn, info and log.</p>\r\n\r\n    </main>\r\n\r\n}\r\nexport default reporter","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}"],"names":["props","href","rel","target","title","language","style","docco","strings","raw","slice"],"sourceRoot":""}