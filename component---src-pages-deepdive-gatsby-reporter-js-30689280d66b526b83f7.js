"use strict";(self.webpackChunkmy_gatsby_site=self.webpackChunkmy_gatsby_site||[]).push([[18],{9354:function(e,t,n){var r=n(7294);t.Z=function(e){return r.createElement("a",{href:e.href,rel:"noreferrer",target:"_blank"},e.title)}},7489:function(e,t,n){n.r(t),n.d(t,{default:function(){return c}});var r,a=n(7294),s=n(9354),o=n(9731),l=n(1270),c=function(){return a.createElement("main",null,a.createElement("title",null,"Reporter"),a.createElement("p",null,"The reporter is used by the cli and the build.  The logging to the console occurs when a reporter action is ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L64",title:"invoked"}),"."),a.createElement("p",null,"The reporter does more than just log messages but concentrating on messages for a moment.  For success, info, warn, log ( and verbose if set in config ) the reporter  ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/reporter.ts#L217",title:"invokes the createLog redux action"}),". How this results in message in the console begins by understanding ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/index.ts",title:"this"})," in particular ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/start-logger.ts#L11",title:"startLogger"})),a.createElement(o.Z,{language:"javascript",style:l.Z},'\n  import { startLogger } from "./start-logger"\n  import { patchConsole } from "./patch-console"\n  import { catchExitSignals } from "./catch-exit-signals"\n  import { reporter } from "./reporter"\n  \n  catchExitSignals()\n  startLogger()\n  patchConsole(reporter)\n  \n  export default reporter\n  module.exports = reporter\n  '),a.createElement("p",null,"patchConsole is simple in that console.log, warn, info and error are replaced to call through to the similarly named methods of the reporter."),a.createElement("p",null,"startLogger determines the logger to use. You can specify with the environment variable GATSBY_LOGGER to change from the default ink to the json logger or yurnalist."),a.createElement("p",null,a.createElement(s.Z,{href:"https://github.com/vadimdemedes/ink#readme",title:"ink"})),a.createElement("cite",null,"Ink provides the same component-based UI building experience that React offers in the browser, but for command-line apps. It uses Yoga to build Flexbox layouts in the terminal, so most CSS-like props are available in Ink as well."),a.createElement("p",null,"Initializing ink uses the render method of ink "),a.createElement(o.Z,{language:"javascript",style:l.Z},'\n  import React, { useContext } from "react"\n  import { render } from "ink"\n  import StoreStateContext, { StoreStateProvider } from "./context"\n  import CLI from "./cli"\n  \n  const ConnectedCLI: React.FC = (): React.ReactElement => {\n    const state = useContext(StoreStateContext)\n    const showStatusBar =\n      // @ts-ignore - program exists on state but we should refactor this\n      state.program?._?.[0] === `develop` &&\n      // @ts-ignore - program exists on state but we should refactor this\n      state.program?.status === `BOOTSTRAP_FINISHED`\n    const showPageTree = !!state.pageTree\n  \n    return (\n      <CLI\n        showStatusBar={Boolean(showStatusBar)}\n        showPageTree={Boolean(showPageTree)}\n        logs={state.logs}\n      />\n    )\n  }\n  \n  export function initializeINKLogger(): void {\n    render(\n      <StoreStateProvider>\n        <ConnectedCLI />\n      </StoreStateProvider>\n    )\n  }\n  '),a.createElement("p",null,"Key to above is the StoreStateProvider that ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L72",title:"listens"})," for ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L64",title:"public actions"}),"and provides the reporter ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/index.ts#L30",title:"store"})," state through context that the ConnectedCLI receives and passes the logs state to CLI."),a.createElement(o.Z,{language:"javascript",style:l.Z},'\n  import React, { useState, useLayoutEffect, createContext } from "react"\n  import { getStore, onLogAction } from "../../redux"\n  import { IGatsbyCLIState } from "../../redux/types"\n  import { IRenderPageArgs } from "../../types"\n  \n  const StoreStateContext = createContext<{\n    logs: IGatsbyCLIState\n    pageTree: IRenderPageArgs | null\n  }>(getStore().getState())\n  \n  export const StoreStateProvider: React.FC = ({\n    children,\n  }): React.ReactElement => {\n    const [state, setState] = useState(getStore().getState())\n  \n    useLayoutEffect(\n      () =>\n        onLogAction(() => {\n          setState(getStore().getState())\n        }),\n      []\n    )\n  \n    return (\n      <StoreStateContext.Provider value={state}>\n        {children}\n      </StoreStateContext.Provider>\n    )\n  }\n  \n  export default StoreStateContext\n  '),a.createElement("p",null,"Concentrating on just the ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/redux/reducers/logs.ts#L28",title:"messages"})," from the createLog action"),a.createElement(o.Z,{language:"javascript",style:l.Z},"\n            <Static items={messages}>\n            {(message): React.ReactElement =>\n              message.level === `ERROR` ? (\n                <ErrorComponent\n                  details={message as IStructuredError}\n                  key={messages.indexOf(message)}\n                />\n              ) : (\n                <Message\n                  key={messages.indexOf(message)}\n                  {...(message as IMessageProps)}\n                />\n              )\n            }\n          </Static>\n  "),a.createElement("p",null,"The ",a.createElement(s.Z,{href:"https://github.com/gatsbyjs/gatsby/blob/a1f35ca37aed1b076f057f1522b56b75a3bdf223/packages/gatsby-cli/src/reporter/loggers/ink/components/messages.tsx#L37",title:"Message component"}),"."),a.createElement(o.Z,{language:"javascript",style:l.Z},'\n        import React from "react"\n        import { Box, Text } from "ink"\n        import { createLabel } from "./utils"\n        \n        import { ActivityLogLevels, LogLevels } from "../../../constants"\n        \n        const getLabel = (\n          level: ActivityLogLevels | LogLevels\n        ): ReturnType<typeof createLabel> => {\n          switch (level) {\n            case ActivityLogLevels.Success:\n            case LogLevels.Success:\n              return createLabel(`success`, `green`)\n            case LogLevels.Warning:\n              return createLabel(`warn`, `yellow`)\n            case LogLevels.Debug:\n              return createLabel(`verbose`, `gray`)\n            case LogLevels.Info:\n              return createLabel(`info`, `blue`)\n            case ActivityLogLevels.Failed:\n              return createLabel(`failed`, `red`)\n            case ActivityLogLevels.Interrupted:\n              return createLabel(`not finished`, `gray`)\n        \n            default:\n              return createLabel(level, `blue`)\n          }\n        }\n\n        /*\n            export const createLabel =\n            (text: string, color: string): FunctionComponent<TextProps> =>\n            (...props): JSX.Element =>\n            (\n                <Text color={color} {...props}>\n                    {text}\n                </Text>\n            )\n        */\n        \n        export interface IMessageProps {\n          level: ActivityLogLevels | LogLevels\n          text: string\n          duration?: number\n          statusText?: string\n        }\n        \n        export const Message = React.memo<IMessageProps>(\n          ({ level, text, duration, statusText }) => {\n            let message = text\n            if (duration) {\n              message += ` - ${duration.toFixed(3)}s`\n            }\n            if (statusText) {\n              message += ` - ${statusText}`\n            }\n            if (!level || level === `LOG`) {\n              return <Text>{message}</Text>\n            }\n        \n            const TextLabel = getLabel(level)\n        \n            return (\n              <Box flexDirection="row">\n                <Text wrap="wrap">\n                  <TextLabel />\n                  {'(r||(e=["}\n                  {message}\n                </Text>\n              </Box>\n            )\n          }\n        )\n  "],t||(t=e.slice(0)),e.raw=t,r=e))),a.createElement("p",null,"We can see that prefix only ( success etc ) is coloured and hard coded and dependent upon the message level associated with reporter.success, warn, info and log."));var e,t}}}]);
//# sourceMappingURL=component---src-pages-deepdive-gatsby-reporter-js-30689280d66b526b83f7.js.map